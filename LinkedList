/**
 * @brief Defines the Node structure for a singly linked list.
 */


/**
 * @struct Node
 * @brief A node in a singly linked list.
 */
typedef struct _node {
    int data;              /**< The integer data stored in the node */
    struct _node* next;    /**< Pointer to the next node in the list */
} Node;


/**
 * @brief Defines the LinkedList structure for a singly linked list.
 */
/**
 * @struct LinkedList
 * @brief A singly linked list.
 */
typedef struct _linkedlist {
    Node* headNode;    /**< Pointer to the first node in the list */
    Node* lastNode;    /**< Pointer to the last node in the list */
    int len;           /**< The number of nodes in the list */
} LinkedList;


/**
 * @brief Creates a new node with the given data.
 *
 * This function allocates memory for a new node, initializes it with
 * the provided data, sets the next pointer to NULL, and returns a pointer
 * to the newly created node.
 *
 * @param data The integer data to be stored in the new node.
 * @return A pointer to the newly created node.
 */
Node* createNode(int data) {
    Node* x = (Node*)malloc(sizeof(Node));
    if (x == NULL) {
        // Handle memory allocation failure if needed
        return NULL;
    }
    x->data = data;
    x->next = NULL;
    return x;
}


/**
 * @brief Checks if the linked list is empty.
 *
 * This function checks if the given linked list is empty by
 * verifying if the length of the list is zero.
 *
 * @param LL Pointer to the linked list to be checked.
 * @return `true` if the linked list is empty, otherwise `false`.
 */
bool isLLEmpty(LinkedList* LL) {
    return (LL->len == 0);
}


/**
 * @brief Inserts a new node with the given data into the linked list.
 *
 * This function creates a new node with the provided data and inserts it
 * at the end of the linked list. It updates the head and last node pointers
 * if the list was previously empty and increments the length of the list.
 *
 * @param LL Pointer to the linked list where the new node will be inserted.
 * @param data The integer data to be stored in the new node.
 */
void insertNewNodeInLL(LinkedList* LL, int data) {
    Node* nd = createNode(data);
    if (isLLEmpty(LL)) {
        LL->headNode = LL->lastNode = nd;
    } else {
        LL->lastNode->next = nd;
        LL->lastNode = nd;
    }
    LL->len++;
}


/**
 * @brief Displays the contents of the linked list.
 *
 * This function prints the data of each node in the linked list
 * to the standard output. If the list is empty, it prints a message
 * indicating that the list is empty.
 *
 * @param LL Pointer to the linked list to be displayed.
 */
void displayLL(LinkedList* LL) {
    if (isLLEmpty(LL)) {
        printf("List is empty");
        return;
    }
    Node* curr = LL->headNode;
    while (curr != NULL) {
        printf("%i ", curr->data);
        curr = curr->next;
    }
}


/**
 * @brief Inserts a new node with the given data at a specified position in the linked list.
 *
 * This function inserts a new node with the provided data at the specified position
 * in the linked list. If the list is empty, it inserts the node at the beginning.
 *
 * @param LL Pointer to the linked list where the new node will be inserted.
 * @param data The integer data to be stored in the new node.
 * @param pos The position where the new node will be inserted (starting from 0).
 */
void insertNodeAtPos(LinkedList* LL, int data, int pos) {
    if (isLLEmpty(LL))
        insertNewNodeInLL(LL, data);
    
    Node* curr = LL->headNode;
    Node* x = createNode(data);

    if (pos == 0) {
        x->next = LL->headNode;
        LL->headNode = x;
    } else {
        for (int i = 0; curr != NULL; i++) {
            if (i == pos - 1) {
                x->next = curr->next;
                curr->next = x;
                break;
            }
            curr = curr->next;
        }
    }
    LL->len++;
}


/**
 * @brief Removes a node from the specified position in the linked list.
 *
 * This function removes the node at the specified position in the linked list.
 * If the position is 0, it removes the first node. If the list is empty or the
 * position is out of bounds, the function returns without making any changes.
 *
 * @param LL Pointer to the linked list from which the node will be removed.
 * @param pos The position of the node to be removed (starting from 0).
 */
void removeNodeFromPos(LinkedList* LL, int pos) {
    if (isLLEmpty(LL))
        return;
    int i = 0;
    Node* curr = LL->headNode;
    if (pos == 0) {
        Node* t = LL->headNode->next;
        free(LL->headNode);
        LL->headNode = t;
        if (t == NULL)
            LL->lastNode = NULL;
        LL->len--;
        return;
    }
    while (curr != NULL) {
        if (i == pos - 1)
            break;
        curr = curr->next;
        i++;
    }
    if (pos >= LL->len || pos < 0)
        return;
    curr->next = curr->next->next;
    LL->len--;
}


/**
 * @brief Removes the first occurrence of a specific value from the linked list.
 *
 * This function searches for the first occurrence of the specified value in the linked list.
 * If found, it removes the node containing that value from the list using `removeNodeFromPos`.
 *
 * @param LL Pointer to the linked list from which the value will be removed.
 * @param data The integer value to be removed from the linked list.
 */
void removeOneValue(LinkedList* LL, int data) {
    int pos = LL->len; // Initialize position beyond the end of the list
    Node* curr = LL->headNode;

    // Traverse the linked list to find the node containing the value
    while (curr != NULL) {
        if (data == curr->data)
            break;
        curr = curr->next;
        pos++; // Increment position for each node traversed
    }

    // Call removeNodeFromPos to remove the node at the found position
    removeNodeFromPos(LL, pos - LL->len);
}


/**
 * @brief Removes the first occurrence of a specific value from the linked list.
 *
 * This function searches for the first occurrence of the specified value in the linked list.
 * If found, it removes the node containing that value from the list using `removeNodeFromPos`.
 *
 * @param LL Pointer to the linked list from which the value will be removed.
 * @param data The integer value to be removed from the linked list.
 */
void removeOneValue(LinkedList* LL, int data) {
    int pos = 0; // Initialize position to zero (position in the list)
    Node* curr = LL->headNode;
    Node* prev = NULL;
    // Traverse the linked list to find the node containing the value
    while (curr != NULL) {
        if (data == curr->data) {
            // Found the node with the desired data, break out of the loop
            break;
        }
        prev = curr;
        curr = curr->next;
        pos++;
    }
    // Check if the value was found
    if (curr == NULL) {
        // Value not found in the linked list
        return;
    }
    // Remove the node at the found position
    if (prev == NULL) {
        // Removing the head node
        LL->headNode = curr->next;
        if (LL->headNode == NULL) {
            LL->lastNode = NULL;
        }
    } else {
        // Removing a node other than the head node
        prev->next = curr->next;
        if (prev->next == NULL) {
            LL->lastNode = prev;
        }
    }
    // Free memory of the removed node
    free(curr);
    LL->len--;
}


/**
 * @brief Removes all nodes containing a specific value from the linked list.
 *
 * This function removes all nodes containing the specified value from the linked list.
 * It updates the pointers and length of the list accordingly.
 *
 * @param LL Pointer to the linked list from which nodes will be removed.
 * @param data The integer value to be removed from the linked list.
 */
void removeAllValue(LinkedList* LL, int data) {
    Node* curr = LL->headNode;
    // Remove nodes from the beginning of the list that match the specified value
    while (LL->headNode != NULL && LL->headNode->data == data) {
        LL->headNode = LL->headNode->next;
        LL->len--;
    }
    // Traverse the list to remove nodes other than the head node that match the specified value
    while (curr != NULL && curr->next != NULL) {
        if (curr->next->data == data) {
            Node* temp = curr->next;
            curr->next = temp->next;
            free(temp);
            LL->len--;
        } else {
            curr = curr->next;
        }
    }
    // Update lastNode pointer if the last node was removed
    if (LL->headNode == NULL) {
        LL->lastNode = NULL;
    }
}
